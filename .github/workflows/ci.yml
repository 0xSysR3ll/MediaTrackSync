name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  release:
    types: [published]

env:
  FIREFOX_ESR_VERSION: '128.10.0esr+build1-0ubuntu0.24.04.1~mt1'
  GECKODRIVER_VERSION: 'v0.36.0'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Firefox ESR and GeckoDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:mozillateam/ppa
          sudo apt-get update
          sudo apt-get install -y firefox-esr=${{ env.FIREFOX_ESR_VERSION }}

          wget "https://github.com/mozilla/geckodriver/releases/download/${{ env.GECKODRIVER_VERSION }}/geckodriver-${{ env.GECKODRIVER_VERSION }}-linux64.tar.gz"
          tar -xvzf "geckodriver-${{ env.GECKODRIVER_VERSION }}-linux64.tar.gz"
          sudo mv geckodriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/geckodriver
          rm "geckodriver-${{ env.GECKODRIVER_VERSION }}-linux64.tar.gz"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov black flake8 mypy

      - name: Run tests with coverage
        run: |
          pytest --cov=app tests/ --cov-report=xml
      - name: Run linting
        run: |
          flake8 app tests
          black --check app tests

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' || github.event_name == 'release'
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest
            type=sha,format=short
            type=ref,event=branch
            type=ref,event=tag

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
